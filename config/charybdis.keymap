#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

#define U_TAPPING_TERM 200

&mt {
    flavor = "balanced";
    quick-tap-ms = <250>;
    tapping-term-ms = <300>;
};

/ {
    chosen { zmk,matrix_transform = &default_transform; };
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_back {
            bindings = <&mkp MB4>;
            key-positions = <31 30>;
            layers = <0>;
            timeout-ms = <60>;
            require-prior-idle-ms = <30>;
        };

        combo_forward {
            bindings = <&mkp MB5>;
            key-positions = <29 28>;
            layers = <0>;
            timeout-ms = <60>;
            require-prior-idle-ms = <30>;
        };

        combo_middle-right {
            bindings = <&mkp MB3>;
            key-positions = <31 33>;
            layers = <0>;
            timeout-ms = <60>;
            require-prior-idle-ms = <30>;
        };

        middle-left {
            bindings = <&mkp MB3>;
            key-positions = <26 28>;
            layers = <0>;
            timeout-ms = <60>;
            require-prior-idle-ms = <30>;
        };

        combo_delete {
            bindings = <&kp DELETE>;
            key-positions = <34 35>;
            layers = <0>;
            timeout-ms = <60>;
            require-prior-idle-ms = <30>;
        };

        combo_lblu {
            bindings = <&tog 8>;
            key-positions = <24 25 26>;
        };

        combo_rblu {
            bindings = <&tog 8>;
            key-positions = <33 34 35>;
        };

        combo_f9 {
            bindings = <&kp F8>;
            key-positions = <38 39>;
        };

        combo_left_lclk {
            bindings = <&mkp LCLK>;
            key-positions = <27 28>;
            timeout-ms = <60>;
            require-prior-idle-ms = <30>;
            layers = <0>;
        };

        combo_right_lclk {
            bindings = <&mkp LCLK>;
            key-positions = <32 31>;
            timeout-ms = <60>;
            require-prior-idle-ms = <30>;
            layers = <0>;
        };

        combo_left_rclk {
            bindings = <&mkp RCLK>;
            key-positions = <26 27>;
            layers = <0>;
            timeout-ms = <60>;
            require-prior-idle-ms = <30>;
        };

        combo_right_rclk {
            bindings = <&mkp RCLK>;
            key-positions = <32 33>;
            timeout-ms = <60>;
            require-prior-idle-ms = <30>;
            layers = <0>;
        };

        combo_colon {
            bindings = <&kp COLON>;
            key-positions = <16 22>;
            timeout-ms = <60>;
            require-prior-idle-ms = <30>;
            layers = <0>;
        };

        combo_f20 {
            bindings = <&kp F20>;
            key-positions = <37 40>;
            layers = <0>;
        };

        combo_left_bracket_quotation {
            bindings = <&left_bracket_and_quotation>;
            key-positions = <16 14>;
            layers = <0>;
        };

        combo_quotation_right_bracket {
            bindings = <&quotation_and_right_bracket>;
            key-positions = <19 21>;
            layers = <0>;
        };

        combo_arraw {
            bindings = <&arraw>;
            key-positions = <15 16>;
            layers = <2>;
        };

        combo_arraw_eq {
            bindings = <&arraw_eq>;
            key-positions = <3 4>;
            layers = <2>;
        };

        combo_equal {
            bindings = <&kp EQUAL>;
            key-positions = <31 16>;
            layers = <0>;
        };

        combo_enter {
            bindings = <&kp ENTER>;
            key-positions = <23 22>;
            layers = <0>;
        };

        combo_bs {
            bindings = <&kp BACKSPACE>;
            key-positions = <1 0>;
            layers = <0>;
        };

        combo_left_enter {
            bindings = <&kp ENTER>;
            key-positions = <12 13>;
            layers = <0>;
        };

        combo_left_del {
            bindings = <&kp DEL>;
            key-positions = <25 24>;
            layers = <0>;
        };

        combo_dollar_combo {
            bindings = <&kp DOLLAR>;
            key-positions = <31 4>;
            layers = <0>;
            timeout-ms = <60>;
            require-prior-idle-ms = <30>;
        };

        combo_ctrl_f19 {
            bindings = <&kp LC(F19)>;
            key-positions = <16 17>;
            layers = <0>;
            timeout-ms = <60>;
            require-prior-idle-ms = <30>;
        };

        combo_ctrl_f20 {
            bindings = <&kp LC(F20)>;
            key-positions = <4 5>;
            layers = <0>;
        };
    };

    macros {
        macro_e_s: macro_e_s {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp E &kp S>;
            label = "macro_e_s";
        };

        macro_l_i: macro_l_i {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp L &kp I>;
            label = "MACRO_L_I";
        };

        left_bracket_and_quotation: left_bracket_and_quotation {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp SQT>;
            label = "LEFT_BRACKET_AND_QUOTATION";
        };

        quotation_and_right_bracket: quotation_and_right_bracket {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp RIGHT_BRACKET>;
            label = "QUOTATION_AND_RIGHT_BRACKET";
        };

        arraw: arraw {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GREATER_THAN>;
            label = "ARRAW";
        };

        arraw_eq: arraw_eq {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GREATER_THAN>;
            label = "ARRAW_EQ";
        };
    };

    behaviors {
        l_s_behavior: l_s_behavior {
            compatible = "zmk,behavior-hold-tap";
            label = "L_S_BEHAVIOR";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <250>;
            retro-tap;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&kp GRAVE       &kp Q       &kp W       &kp E                 &kp R         &kp T      &kp Y      &kp U         &kp I                  &kp O                &kp P          &kp BSPC
&kp ESC         &mt LWIN A  &mt LALT S  &mt LCTRL D           &mt LSHIFT F  &kp G      &kp H      &mt RSHIFT J  &mt RCTRL K            &mt RALT L           &mt RWIN SEMI  &kp APOS
&kp LEFT_SHIFT  &lt 6 Z     &lt 4 X     &lt 3 C               &lt 1 V       &kp B      &kp N      &kp M         &l_s_behavior 2 COMMA  &l_s_behavior 5 DOT  &lt 6 SLASH    &kp LEFT_WIN
                                        &mt LCTRL UNDERSCORE  &kp SPACE     &kp TAB    &kp ENTER  &kp SPACE
            >;

            label = "Corne";
        };

        arrow_media {
            bindings = <
&kp GRAVE  &none     &none     &none      &none      &none       &none       &kp C_VOL_DN  &kp C_VOL_UP  &none      &none           &kp BSPC
&kp ESC    &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &none       &kp LEFT    &kp DOWN      &kp UP        &kp RIGHT  &mt HOME PG_UP  &kp ENTER
&kp LSHFT  &none     &none     &none      &none      &none       &kp C_MUTE  &kp C_PREV    &kp C_NEXT    &kp C_PP   &mt END PG_DN   &kp DELETE
                               &kp LCTRL  &kp LSHFT  &kp LALT    &kp RSHFT   &kp RCTRL
            >;

            label = "HJKL_media";
        };

        symbols {
            bindings = <
&kp GRAVE       &kp AMPERSAND    &kp AT_SIGN    &kp POUND  &kp DOLLAR  &kp PERCENT       &trans     &trans     &trans     &trans    &trans    &kp BSPC
&kp ESC         &kp EXCLAMATION  &kp ASTRK      &kp MINUS  &kp EQUAL   &kp TILDE         &trans     &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI  &kp ENTER
&kp LEFT_SHIFT  &kp CARET        &kp BACKSLASH  &kp PIPE   &kp SLASH   &kp UNDERSCORE    &trans     &trans     &trans     &trans    &trans    &kp DELETE
                                                &kp LCTRL  &kp LSHFT   &kp LALT          &kp RSHFT  &kp RCTRL
            >;

            label = "!@#$";
        };

        brackets {
            bindings = <
&none  &none  &none  &none      &none      &none       &kp LEFT_BRACE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACE   &kp PIPE  &kp BSPC
&none  &none  &none  &none      &none      &none       &kp LESS_THAN   &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp GREATER_THAN  &kp SEMI  &kp APOS
&none  &none  &none  &none      &none      &none       &kp BACKSLASH   &kp EQUAL             &kp COMMA              &kp DOT           &kp FSLH  &kp DEL
                     &kp LCTRL  &kp LSHFT  &kp LALT    &kp ENTER       &kp SPACE
            >;

            label = "<[({})]>";
        };

        number {
            bindings = <
&kp GRAVE  &trans    &trans    &trans     &trans     &trans      &kp ASTERISK  &kp N7  &kp N8  &kp N9  &kp EQUAL  &kp BSPC
&kp ESC    &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans      &kp MINUS     &kp N4  &kp N5  &kp N6  &kp DOT    &kp ENTER
&kp LSHFT  &trans    &trans    &trans     &trans     &trans      &kp PLUS      &kp N1  &kp N2  &kp N3  &kp FSLH   &kp DOT
                               &kp LCTRL  &kp LSHFT  &kp LALT    &kp RSHFT     &kp N0
            >;

            label = "12345";
        };

        Fn {
            bindings = <
&none  &kp F12  &kp F11  &kp F10    &kp F9     &none       &trans     &trans     &trans     &trans    &trans    &kp BSPC
&none  &kp F4   &kp F3   &kp F2     &kp F1     &none       &trans     &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI  &kp ENTER
&none  &kp F8   &kp F7   &kp F6     &kp F5     &none       &trans     &trans     &trans     &trans    &trans    &kp DELETE
                         &kp LCTRL  &kp LSHFT  &kp LALT    &kp RSHFT  &kp RCTRL
            >;

            label = "Fn";
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };

        mouse {
            bindings = <
&trans  &trans  &trans     &trans     &trans     &trans    &trans  &trans     &trans     &trans     &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans    &trans  &trans     &trans     &trans     &trans  &trans
&trans  &trans  &mkp RCLK  &mkp MCLK  &mkp LCLK  &trans    &trans  &mkp LCLK  &mkp MCLK  &mkp RCLK  &trans  &trans
                           &trans     &trans     &trans    &trans  &trans
            >;

            label = "mouse";
        };

        BULETOOTH {
            bindings = <
&bt BT_CLR  &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR
&none       &none         &none         &none         &bt BT_PRV    &none           &none         &bt BT_NXT    &none         &none         &none         &none
&sys_reset  &none         &none         &none         &none         &bootloader     &bootloader   &none         &none         &none         &none         &sys_reset
                                        &none         &none         &none           &none         &none
            >;
        };
    };
};
